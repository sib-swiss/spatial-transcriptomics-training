
# Mapping + counting (spaceranger)

we downloaded the data from https://www.10xgenomics.com/datasets/fresh-frozen-visium-on-cytassist-mouse-brain-probe-based-whole-transcriptome-profiling-2-standard

Fresh Frozen Visium on CytAssist: Mouse Brain, Probe-Based Whole Transcriptome Profiling

```{r}
#| output: false
library(Seurat)
library(umap)
library(ggpubr)
library(tidyr)
```

## Setup & the Seurat object

Specify input directories and files.

```{r}
# analysisFolder <- "analysis"
# dir.create(analysisFolder, showWarnings = FALSE)
# 
# 
# count_folder <- "raw_data"
# slice_names <- c("Anterior", "Posterior")
# input_paths <- file.path(count_folder, slice_names)
# names(input_paths) <- slice_names
# 
# input_paths
```

Load data into an seurat object. Here, we loop over the two slices, and combine it in a list of two seurat objects. 

```{r}
seu <- Load10X_Spatial(data.dir = "raw_data/Posterior/",
                       slice = "Posterior")
```

```{r}
seu
```

```{r}
seu[["Spatial"]]$counts
```

```{r}
SpatialPlot(seu, alpha = 0) + NoLegend()
SpatialPlot(seu, alpha = 0.5) + NoLegend()
```

## Quality control

### Library size versus detected genes

A high number of detected genes can potentially indicate doublets. 
However, depending on the celltype composition in your sample, 
it may also reflect true biological variation among cell types.  

nCount_Spatial: total number of counts for a spot (i.e. library size)  
nFeature_Spatial: total number of genes expressed in a spot  

```{r}
SpatialPlot(seu, features = "nCount_Spatial") +
  theme(legend.position = "right")

SpatialPlot(seu, features ="nFeature_Spatial") +
  theme(legend.position = "right")


FeatureScatter(seu,
               feature1 = "nCount_Spatial",
               feature2 = "nFeature_Spatial"
) +
  labs(title = "All spots") +
  NoLegend()
```

### Percent of mitochondrial reads

Low quality/dying cells often exhibit extensive mitochondrial contamination.
Spots with a high proportion of mitochondrial reads will be removed.

```{r}
seu <- PercentageFeatureSet(seu,
                             pattern = "^MT-|^Mt-|^mt-",
                             col.name = "percent_mt"
)

SpatialFeaturePlot(seu, features = "percent_mt", alpha = 0.7) +
  theme(legend.position = "right")

VlnPlot(seu, features = "percent_mt", layer = "counts")
```



## Filtering

### Identifying low-quality spots

Remove spots with less than 500 unique feature counts 
remove spots with >=32% mitocondrial counts

You must judge for yourself based on your knowledge of the tissue and the above graphics.

```{r}
high_mt_spots <- Cells(seu)[seu$percent_mt > 32]

SpatialPlot(seu, cells.highlight = percent_mt_filter) + NoLegend()

low_nfeature_spots <- Cells(seu)[seu$nFeature_Spatial < 500]

SpatialPlot(seu, cells.highlight = low_nfeature_spots) + NoLegend()

```


```{r}
seu <- seu[, seu$nFeature_Spatial > 500 & seu$percent_mt < 32]
SpatialPlot(seu, alpha = 0.5) + NoLegend()
```

### Gene-level QC

Plots showing the top 30 most highly expressed genes in each sample. Each row corresponds to a gene, 
and each boxplot corresponds to the expression of a gene (i.e. number of reads) in a single spot. 
The vertical line in the box indicates the median expression of each gene across all spots. 
Genes are sorted in decreasing order based on median expression.

Sometimes individual genes may have very high expression and should be removed to avoid problems 
at the normalization step. In particular, look out for MALAT1 and other nuclear lincRNAs, 
mitochondrial genes (prefix mt-), ribosomal proteins (starting with rp), actin and hemoglobin.

```{r}
raw_counts <- seu[["Spatial"]]$counts
raw_counts@x <- raw_counts@x / rep.int(colSums(raw_counts), diff(raw_counts@p))
most_expressed <- order(Matrix::rowSums(C), decreasing = TRUE)[30:1]

as.matrix(C[most_expressed, ]) |>
  t() |>
  as.matrix() |>
  boxplot(
    cex.axis = 0.5,
    cex.lab = 0.8,
    cex = 0.1,
    las = 1,
    xlab = "% total count per cell",
    col = (scales::hue_pal())(30)[30:1],
    horizontal = TRUE
  )
```


```{r}
remove_genes <- c("mt-Co3", "mt-Co1",
                  "mt-Atp6", "mt-Cytb",
                  "mt-Co2", "mt-Nd4",
                  "mt-Nd2", "mt-Nd1")
```

```{r}
remove_feature <- rownames(seu) %in% remove_genes
seu <- seu[!remove_feature, ]

```


## Normalization

Biological heterogeneity in spatial RNA-seq data is often confounded by technical factors including sequencing depth. 
The number of molecules detected in each spot can vary significantly between spots, even within the same celltype. 
Note that the variance in molecular counts/spot can be substantial for spatial datasets, particularly if there are 
differences in cell density across the tissue. 

Therefore, we apply sctransform normalization (Hafemeister and Satija, Genome Biology 2019), which builds regularized 
negative binomial models of gene expression in order to account for technical artifacts while preserving biological variance. 
During the normalization, we also remove confounding sources of variation (mitochondrial and ribosomal mapping percentage).

Apply sctransform normalization:
- Transformed data will be available in the SCT assay, which is set as the default after running sctransform
- During normalization, we can also remove confounding sources of variation, for example, mitochondrial mapping percentage

```{r}
seu <- SCTransform(
  seu,
  assay = "Spatial",
  vars.to.regress = c("percent_mt"),
  verbose = FALSE
)
```

```{r}
saveRDS(seu,
        paste0(analysisFolder, "/normalized_Posterior.rds"))
```

```{r}
SpatialFeaturePlot(seu, features = "nCount_Spatial")+
  labs(title = "Original counts") +
  theme(legend.position = "right")


SpatialFeaturePlot(seu, features = "nCount_SCT") +
  labs(title = "Counts after SCT") +
  theme(legend.position = "right")


```

```{r}
SpatialFeaturePlot(seu, features = "Ttr") +
  theme(legend.position = "right")
```

