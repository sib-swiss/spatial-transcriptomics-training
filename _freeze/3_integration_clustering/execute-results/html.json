{
  "hash": "2a191d9662627dd8b9a35efe729684c6",
  "result": {
    "markdown": "---\ntitle: \"Integration and clustering\"\nengine: knitr\n---\n\n::: {.cell hash='3_integration_clustering_cache/html/unnamed-chunk-1_4e1ac66d40bdd4f8f1e2b8b04277c8bb'}\n\n```{.r .cell-code}\nlibrary(Seurat)\nlibrary(ggplot2)\nlibrary(clustree)\nlibrary(patchwork)\nlibrary(dplyr)\n```\n:::\n\n::: {.cell hash='3_integration_clustering_cache/html/unnamed-chunk-2_8e08902f8652e843fbc24dbc548acb95'}\n\n```{.r .cell-code}\nseu_list <- readRDS(\"output/normalized.rds\")\nseu <- merge(seu_list[[1]], seu_list[[2]])\n```\n:::\n\n::: {.cell hash='3_integration_clustering_cache/html/unnamed-chunk-3_00c155d83637849d805ee4a7ec915132'}\n\n```{.r .cell-code}\nVariableFeatures(seu) <- intersect(VariableFeatures(seu_list$Anterior),\n                           VariableFeatures(seu_list$Posterior))\nseu <- RunPCA(seu, assay = \"SCT\", npcs = 50, verbose = FALSE)\nseu <- RunUMAP(seu, reduction = \"pca\", dims = 1:50)\n```\n:::\n\n::: {.cell hash='3_integration_clustering_cache/html/unnamed-chunk-4_81c6ee07614adf786cb55b0af46ebbf5'}\n\n```{.r .cell-code}\nDimPlot(seu, reduction = \"pca\", group.by = \"orig.ident\") + \n  scale_color_viridis_d(option = \"cividis\")\n```\n\n::: {.cell-output-display}\n![](3_integration_clustering_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n\n```{.r .cell-code}\nDimPlot(seu, reduction = \"umap\", group.by = \"orig.ident\") + \n  scale_color_viridis_d(option = \"cividis\")\n```\n\n::: {.cell-output-display}\n![](3_integration_clustering_files/figure-html/unnamed-chunk-4-2.png){width=672}\n:::\n:::\n\n\n## Integration\n\nYou can safely ignore the warning: `Warning: Different cells and/or features from existing assay SCT`. See [this issue](https://github.com/satijalab/seurat/issues/7145). \n\n\n::: {.cell hash='3_integration_clustering_cache/html/unnamed-chunk-5_5f705fa5265c63c31f630dd473c70840'}\n\n```{.r .cell-code}\nfeatures <- SelectIntegrationFeatures(seu_list)\nseu_list <- PrepSCTIntegration(seu_list, anchor.features = features)\n\nanchors <- FindIntegrationAnchors(\n  seu_list,\n  normalization.method = \"SCT\",\n  anchor.features = features\n)\nseu_int <- IntegrateData(anchors, normalization.method = \"SCT\")\n```\n:::\n\n::: {.cell hash='3_integration_clustering_cache/html/unnamed-chunk-6_a84a5aa25e7e8cd4047b60f15e0959a4'}\n\n```{.r .cell-code}\nseu_int <- FindVariableFeatures(seu_int)\nseu_int <- RunPCA(seu_int, npcs = 50, verbose = FALSE)\nseu_int <- RunUMAP(seu_int, reduction = \"pca\", dims = 1:50)\nDimPlot(seu_int, reduction = \"umap\") + \n  scale_color_viridis_d(option = \"cividis\")\n```\n\n::: {.cell-output-display}\n![](3_integration_clustering_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n\n\n\n## Identifying clusters\n\nSeurat implements a graph-based clustering approach. Distances between the spots are calculated based on\npreviously identified PCs. Briefly, Seurat identifies clusters of spots by a shared nearest neighbor (SNN)\nmodularity optimization based clustering algorithm. First, it identifies k-nearest neighbors (KNN) and constructs\nthe SNN graph. Then it optimizes the modularity function to determine clusters. For a full description of the\nalgorithms, see Waltman and van Eck (2013) The European Physical Journal B.\n\nThe FindClusters function implements the procedure, and contains a resolution parameter that sets the granularity\nof the downstream clustering, with increased values leading to a greater number of clusters.\n\n\n::: {.cell hash='3_integration_clustering_cache/html/unnamed-chunk-7_d6ffe6c6ebe9163d7b210d26f3c8fd5a'}\n\n```{.r .cell-code}\nresolution_vector <- seq(0.1,1,0.1)\nseu_int <- FindNeighbors(seu_int, reduction = \"pca\", dims = 1:50)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nComputing nearest neighbor graph\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nComputing SNN\n```\n:::\n\n```{.r .cell-code}\nseu_int <- FindClusters(object = seu_int,\n                          resolution = resolution_vector,\n                          verbose=FALSE)\n```\n:::\n\n::: {.cell hash='3_integration_clustering_cache/html/unnamed-chunk-8_e9eef402dcb1a1678ce53dbce0de7d6b'}\n\n```{.r .cell-code}\nclustree(seu_int, prefix = \"integrated_snn_res.\")\n```\n\n::: {.cell-output-display}\n![](3_integration_clustering_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n::: {.cell hash='3_integration_clustering_cache/html/unnamed-chunk-9_fa9a6e8124a062d9eea942ee89ee4027'}\n\n```{.r .cell-code}\nres <- \"integrated_snn_res.0.4\"\nnclust <- seu_int[[res]] |> unique() |> nrow()\ncluster_cols <- viridis::viridis_pal(option = \"H\")(nclust)\n\nDimPlot(seu_int,\n        group.by = res,\n        shuffle = TRUE,\n        cols = cluster_cols)\n```\n\n::: {.cell-output-display}\n![](3_integration_clustering_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n\n```{.r .cell-code}\nSpatialPlot(seu_int, group.by = res, pt.size.factor = 2) + \n  plot_layout(guides='collect') &\n  theme(legend.position = \"none\") &\n  scale_fill_viridis_d(option = \"H\")\n```\n\n::: {.cell-output-display}\n![](3_integration_clustering_files/figure-html/unnamed-chunk-9-2.png){width=672}\n:::\n:::\n\n::: {.cell hash='3_integration_clustering_cache/html/unnamed-chunk-10_21a002ee3e020483e90b952f73a3afde'}\n\n```{.r .cell-code}\nIdents(seu_int) <- \"integrated_snn_res.0.4\"\n```\n:::\n\n::: {.cell hash='3_integration_clustering_cache/html/unnamed-chunk-11_e16c0dfef8c1cf75855c1aff5b72eed0'}\n\n```{.r .cell-code}\nDefaultAssay(seu_int) <- \"SCT\"\nseu_int <- PrepSCTFindMarkers(seu_int)\nall_marks <- FindAllMarkers(seu_int, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25)\n```\n:::\n\n::: {.cell hash='3_integration_clustering_cache/html/unnamed-chunk-12_f03dc5d02c199c29c9d98a72f220f3f7'}\n\n```{.r .cell-code}\ntop_markers <- all_marks |>\n  mutate(order_value = avg_log2FC * -log10(p_val_adj + 1e-323)) |>\n  arrange(cluster, desc(order_value)) |>\n  group_by(cluster) |>\n  top_n(3)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nSelecting by order_value\n```\n:::\n\n```{.r .cell-code}\n# DefaultAssay(seu_int) <- \"integrated\"\n\nDotPlot(seu_int, features = top_markers$gene) +\n  scale_x_discrete(guide = guide_axis(angle = 45))\n```\n\n::: {.cell-output-display}\n![](3_integration_clustering_files/figure-html/unnamed-chunk-12-1.png){width=864}\n:::\n:::\n\n::: {.cell hash='3_integration_clustering_cache/html/unnamed-chunk-13_7f855fee453dc45fdd55c65fa2f8f18e'}\n\n```{.r .cell-code}\nSpatialDimPlot(seu_int, \n               cells.highlight = CellsByIdentities(object = seu_int,\n                                                   idents = 3)) + \n  plot_layout(guides='collect') &\n  theme(legend.position = \"none\") \n```\n\n::: {.cell-output-display}\n![](3_integration_clustering_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n\n```{.r .cell-code}\nSpatialPlot(seu_int,\n            features = top_markers$gene[top_markers$cluster == 3][1],\n            pt.size.factor = 2) \n```\n\n::: {.cell-output-display}\n![](3_integration_clustering_files/figure-html/unnamed-chunk-13-2.png){width=672}\n:::\n:::\n\n::: {.cell hash='3_integration_clustering_cache/html/unnamed-chunk-14_6af6cabe8453496799b5bc4f4a871520'}\n\n```{.r .cell-code}\nSpatialDimPlot(seu_int, \n               cells.highlight = CellsByIdentities(object = seu_int,\n                                                   idents = 0)) + \n  plot_layout(guides='collect') &\n  theme(legend.position = \"none\") \n```\n\n::: {.cell-output-display}\n![](3_integration_clustering_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n\n```{.r .cell-code}\nSpatialPlot(seu_int,\n            features = top_markers$gene[top_markers$cluster == 0][1],\n            pt.size.factor = 2) \n```\n\n::: {.cell-output-display}\n![](3_integration_clustering_files/figure-html/unnamed-chunk-14-2.png){width=672}\n:::\n:::\n\n\n\n<!-- ```{r} -->\n<!-- DefaultAssay(seu_list$Anterior) <- \"SCT\" -->\n\n<!-- seu_list$Anterior <- -->\n<!--   FindSpatiallyVariableFeatures( -->\n<!--     seu_list$Anterior, -->\n<!--     features = rownames(seu_int), -->\n<!--     selection.method = \"moransi\" -->\n<!--   ) -->\n\n<!-- spatialFeatures <- -->\n<!--   SVFInfo(seu_list$Anterior, method = \"moransi\", status = TRUE) -->\n<!-- spatialFeatures <- -->\n<!--   spatialFeatures |> arrange(rank) -->\n\n<!-- SpatialPlot(seu_list$Anterior, features = rownames(spatialFeatures)[1:6], ncol = 3, alpha = c(0.1, 1)) -->\n<!-- ``` -->\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}